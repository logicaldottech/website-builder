import { Component, ComponentStyle } from '../types/builder';

function toKebabCase(str: string): string {
  return str.replace(/[A-Z]/g, letter => `-${letter.toLowerCase()}`);
}

function generateComponentJsx(component: Component, indentLevel = 1): string {
  const { type, props, children } = component;
  const indent = '  '.repeat(indentLevel);
  const styleObject = props.style || {};

  // Convert style object to a React-friendly style prop object string
  const styleEntries = Object.entries(styleObject)
    .map(([key, value]) => `'${key}': '${value}'`)
    .join(', ');
  const styleProp = styleEntries ? ` style={{ ${styleEntries} }}` : '';

  let tag = 'div';
  let content = props.text || '';

  switch (type) {
    case 'Heading':
      tag = 'h1'; // A more robust solution might use h2, h3 etc. based on props
      break;
    case 'Paragraph':
      tag = 'p';
      break;
    case 'Button':
      tag = 'button';
      break;
    case 'Container':
      tag = 'div';
      content = ''; // Container content is its children
      break;
  }

  if (children && children.length > 0) {
    const childrenJsx = children.map(child => generateComponentJsx(child, indentLevel + 1)).join('\n');
    return `${indent}<${tag}${styleProp}>
${childrenJsx}
${indent}</${tag}>`;
  }

  return `${indent}<${tag}${styleProp}>${content}</${tag}>`;
}

export function generatePageTsx(components: Component[]): string {
  const componentsJsx = components.map(component => generateComponentJsx(component, 2)).join('\n');

  return `import type { NextPage } from 'next';
import Head from 'next/head';

const HomePage: NextPage = () => {
  return (
    <div>
      <Head>
        <title>My Awesome Site</title>
        <meta name="description" content="Generated by Builder" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
${componentsJsx}
      </main>
    </div>
  );
};

export default HomePage;
`;
}

export function generatePackageJson(): string {
  const packageJson = {
    name: 'exported-site',
    version: '0.1.0',
    private: true,
    scripts: {
      dev: 'next dev',
      build: 'next build',
      start: 'next start',
      lint: 'next lint',
    },
    dependencies: {
      next: '14.2.5',
      react: '18.3.1',
      'react-dom': '18.3.1',
    },
    devDependencies: {
      '@types/node': '20.14.12',
      '@types/react': '18.3.3',
      '@types/react-dom': '18.3.0',
      autoprefixer: '10.4.19',
      eslint: '8.57.0',
      'eslint-config-next': '14.2.5',
      postcss: '8.4.39',
      tailwindcss: '3.4.6',
      typescript: '5.5.4',
    },
  };
  return JSON.stringify(packageJson, null, 2);
}

export function generateTailwindConfig(): string {
  return `/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx}',
    './components/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
`;
}
